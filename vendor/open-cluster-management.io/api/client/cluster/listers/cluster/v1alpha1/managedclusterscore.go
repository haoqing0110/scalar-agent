// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "open-cluster-management.io/api/cluster/v1alpha1"
)

// ManagedClusterScoreLister helps list ManagedClusterScores.
// All objects returned here must be treated as read-only.
type ManagedClusterScoreLister interface {
	// List lists all ManagedClusterScores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedClusterScore, err error)
	// ManagedClusterScores returns an object that can list and get ManagedClusterScores.
	ManagedClusterScores(namespace string) ManagedClusterScoreNamespaceLister
	ManagedClusterScoreListerExpansion
}

// managedClusterScoreLister implements the ManagedClusterScoreLister interface.
type managedClusterScoreLister struct {
	indexer cache.Indexer
}

// NewManagedClusterScoreLister returns a new ManagedClusterScoreLister.
func NewManagedClusterScoreLister(indexer cache.Indexer) ManagedClusterScoreLister {
	return &managedClusterScoreLister{indexer: indexer}
}

// List lists all ManagedClusterScores in the indexer.
func (s *managedClusterScoreLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedClusterScore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedClusterScore))
	})
	return ret, err
}

// ManagedClusterScores returns an object that can list and get ManagedClusterScores.
func (s *managedClusterScoreLister) ManagedClusterScores(namespace string) ManagedClusterScoreNamespaceLister {
	return managedClusterScoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagedClusterScoreNamespaceLister helps list and get ManagedClusterScores.
// All objects returned here must be treated as read-only.
type ManagedClusterScoreNamespaceLister interface {
	// List lists all ManagedClusterScores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedClusterScore, err error)
	// Get retrieves the ManagedClusterScore from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagedClusterScore, error)
	ManagedClusterScoreNamespaceListerExpansion
}

// managedClusterScoreNamespaceLister implements the ManagedClusterScoreNamespaceLister
// interface.
type managedClusterScoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagedClusterScores in the indexer for a given namespace.
func (s managedClusterScoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedClusterScore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedClusterScore))
	})
	return ret, err
}

// Get retrieves the ManagedClusterScore from the indexer for a given namespace and name.
func (s managedClusterScoreNamespaceLister) Get(name string) (*v1alpha1.ManagedClusterScore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managedclusterscore"), name)
	}
	return obj.(*v1alpha1.ManagedClusterScore), nil
}
